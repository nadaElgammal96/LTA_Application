
package com.fym.lta.UI;

import com.fym.lta.BAO.BaoFactory;
import com.fym.lta.BAO.BuildinBao;
import com.fym.lta.BAO.RoleBao;
import com.fym.lta.DAO.BuildingDao;
import com.fym.lta.DAO.DaoFactory;
import com.fym.lta.DAO.EquipmentTypeDao;
import com.fym.lta.DAO.RoleDao;
import com.fym.lta.DAO.UserDao;
import com.fym.lta.DTO.BuildingDto;
import com.fym.lta.DTO.RoleDto;
import com.fym.lta.DTO.UserDto;

import java.awt.TextField;

import java.util.List;

import javax.management.relation.Role;

import javax.swing.JOptionPane;

/**
 *
 * @author Hala Nagm Eldin
 */
public class RolePanel extends javax.swing.JPanel {
    
    private RoleBao business;
    
    public  RolePanel() {
          try{
             
              business = new BaoFactory().createRoleBao();
              RoleDao dao = new DaoFactory().createRoleDao() ;
             initComponents();
              setTableModel(dao.viewAll());  
      }
          catch (Exception e) {
                      // TODO: Add catch code
                      e.printStackTrace();
                  }

      }
        
            private void setTableModel (List<RoleDto> roles){
                
                int size = 0;
                if(roles != null && !roles.isEmpty())
                    size = roles.size();
                Object [][] roleTableArr = new Object[roles.size()][3];
                for (int i = 0; i<roles.size(); i++){
                    roleTableArr[i][0]=roles.get(i).getId();
                    roleTableArr[i][1]=roles.get(i).getName();
                    roleTableArr[i][2]=roles.get(i).getDescription();
                }
                roleTable.setModel(new javax.swing.table.DefaultTableModel( roleTableArr, new String[]{
                    "Id", "Name", "Description"
                }
             ));                                                                                        
                                                                           
            }
         
    /** Creates new form RolePanel */
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   
    
    private void initComponents() {//GEN-BEGIN:initComponents

        search = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        descrip = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        roleTable = new javax.swing.JTable();
        NewButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();

        search.setText("Enter Text To Search For");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        SearchButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SearchButton.setText("SEARCH");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("ID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Description");

        id.setText("Enter Role ID");
        id.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                idFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                idFocusLost(evt);
            }
        });
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        name.setText("Enter Role Name");
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        descrip.setText("Enter Role Description");
        descrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descripActionPerformed(evt);
            }
        });

        roleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "NAME", "DESCRIPTION"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(roleTable);
        if (roleTable.getColumnModel().getColumnCount() > 0) {
            roleTable.getColumnModel().getColumn(0).setHeaderValue("ID");
            roleTable.getColumnModel().getColumn(1).setHeaderValue("NAME");
            roleTable.getColumnModel().getColumn(2).setHeaderValue("DESCRIPTION");
        }

        NewButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        NewButton.setText("New");
        NewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewButtonActionPerformed(evt);
            }
        });

        DeleteButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        RefreshButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        SaveButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(name, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(id, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(descrip, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 681, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(NewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(RefreshButton)
                        .addGap(41, 41, 41)
                        .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(606, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(descrip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewButton)
                    .addComponent(DeleteButton)
                    .addComponent(RefreshButton)
                    .addComponent(SaveButton))
                .addGap(20, 20, 20))
        );
    }//GEN-END:initComponents


    RoleDto role = new RoleDto();
    
    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
       // String Search = search.getText();
    }//GEN-LAST:event_searchActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
        //String Id = id.getText();
    }//GEN-LAST:event_idActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
       // String Name = name.getText();
    }//GEN-LAST:event_nameActionPerformed

    private void descripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descripActionPerformed
        // TODO add your handling code here:
       // String describ = .getText();
    }//GEN-LAST:event_descripActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        
        try{
     
            
             RoleDao r = new DaoFactory().createRoleDao();
             //RoleBao Rolee = new BaoFactory().createRoleBao();
    
            List<RoleDto> search_list = null;
            RoleDto roles = new RoleDto(search.getText());
            search_list = business.searchFor(roles);
            
             if( search_list !=null){
                     JOptionPane.showMessageDialog(this, "Result Found");
                     setTableModel( search_list );
                     roleTable.repaint();
             }
             else{
                     JOptionPane.showMessageDialog(this, "Result is not Exist");
                     this.setTableModel(r.viewAll());
                     roleTable.repaint();
                 }
             
             }catch(Exception e){
                 e.printStackTrace();
                 }
         
        
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void NewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewButtonActionPerformed
        // TODO add your handling code here:
        try{       
                   if (checkValidity()){
                  RoleDao r = new DaoFactory().createRoleDao();
                   role.setId(Integer.parseInt(id.getText()));
                   role.setName(name.getText());
                   role.setDescription(descrip.getText());
                   
                   if(business.add(role)){
                       JOptionPane.showMessageDialog(this, "Role Inserted Successfully");
                       setTableModel(r.viewAll());
                       roleTable.repaint();
                   }else
                   {
                   roleTable.repaint();
               }}
                  id.setText("Enter Role ID");
                   name.setText("Enter Role Name");
                  descrip.setText("Enter Role Description");
                  
               }
               catch(Exception e){
                   e.printStackTrace();
               }
           
    }//GEN-LAST:event_NewButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        try{
                 RoleDao r = new DaoFactory().createRoleDao();
                 int row = roleTable.getSelectedRow();
                 role.setId(Integer.parseInt(roleTable.getModel().getValueAt(row,0).toString()));
                 role.setName(roleTable.getModel().getValueAt(row,1).toString());
                 role.setDescription(roleTable.getModel().getValueAt(row,2).toString());
                 if(business.delete(role)){
                     JOptionPane.showMessageDialog(this, "Result Deleted Successfully");
                     setTableModel(r.viewAll());
                     roleTable.repaint();
                 }else{
                     JOptionPane.showMessageDialog(this, "select to delete");
                     roleTable.repaint();
                 }
                 }
             catch(java.lang.ArrayIndexOutOfBoundsException e){
                 JOptionPane.showMessageDialog(this, "Please select row from table to delete");
                 }
             catch(Exception e){
                 e.printStackTrace();
             }

           
        
        
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        // TODO add your handling code here:
        
        try{
                  RoleDao r = new DaoFactory().createRoleDao();
                  setTableModel(r.viewAll());
                  roleTable.repaint();
              }
              catch(Exception e)
              { e.printStackTrace();}

          
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        try
            {   
                if(checkValidity()){
                RoleDao r = new DaoFactory().createRoleDao();
                role.setId(Integer.parseInt(id.getText()));
                role.setName(name.getText());
                role.setDescription(descrip.getText());
               
                if(business.update(role)){
                    JOptionPane.showMessageDialog(this, "Role Updated Successfully");
                    setTableModel(r.viewAll());
                    roleTable.repaint();
                }else{
                    roleTable.repaint();
                }
            }
                id.setText("Enter Role ID");
                 name.setText("Enter Role Name");
                descrip.setText("Enter Role Description");
                
            
            }
            catch(Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error!");
            }
            
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void idFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idFocusGained
    if (id.getText().equalsIgnoreCase("Enter Role ID"))
    id.setText("");

    }//GEN-LAST:event_idFocusGained

    private void idFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idFocusLost
    if (id.getText().trim().equalsIgnoreCase(""))
    id.setText("Enter Role ID");

    }//GEN-LAST:event_idFocusLost



    private boolean checkValidity(){

            // check input 1
            try{
                if(id.getText().equalsIgnoreCase("Enter The ID")){
                    JOptionPane.showMessageDialog(this, "Please, enter id number","",JOptionPane.ERROR_MESSAGE);
                    return false;            
                }
                Integer.parseInt(id.getText());
               // return true;
            }catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this, "ID is invalid! \n (please enter a number)");
                         // own implemented dialog
                return false;
            }
            try{
                if(name.getText().equalsIgnoreCase("Enter The Name")){
                    JOptionPane.showMessageDialog(this, "Please, enter name");
                    return false;
                }
                    Integer.parseInt(name.getText());
                    JOptionPane.showMessageDialog(this, "Name is invalid! \n (please enter a string)");
                    return false;
                }catch (NumberFormatException e){
                             // own implemented dialog
                    
            try{
                if(descrip.getText().equalsIgnoreCase("Enter The Description")){
                    JOptionPane.showMessageDialog(this, "Please, enter description");
                    return false;
                }
                    Integer.parseInt(descrip.getText());
                    JOptionPane.showMessageDialog(this, "Description is invalid! \n (please enter a string)");
                    return false;
                }catch (NumberFormatException es){
                             // own implemented dialog
                  //  return true;
            return true;
        }}}
        


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton NewButton;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField descrip;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name;
    private javax.swing.JTable roleTable;
    private javax.swing.JTextField search;
    // End of variables declaration//GEN-END:variables

}
