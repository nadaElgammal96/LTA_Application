
package com.fym.lta.UI;

import com.fym.lta.BAO.BaoFactory;
import com.fym.lta.BAO.EqTypeSpecBao;
import com.fym.lta.BAO.EquipSpecificationBao;
import com.fym.lta.DTO.EquipSpecificationDto;
import com.fym.lta.DTO.EquipTypeSpecDetailsDto;

import java.awt.event.KeyEvent;

import java.util.List;

import javax.swing.JOptionPane;

/**
 *
 * @author Nada El-Gammal
 */
public class EqTypeSpecJFrame extends javax.swing.JFrame {

        private EqTypeSpecBao business;
    /** Creates new form EqTypeSpecJFrame */
    public EqTypeSpecJFrame() {
        try {
                   business = new BaoFactory().createEqTypeSpecBao();

                   initComponents();
                   setTableModel(business.viewAll());            
                   
               } catch (Exception e) {
                   e.printStackTrace();
               }    }
    
    private void setTableModel(List<EquipTypeSpecDetailsDto> e){
            int size = 0;
            if(e != null && !e.isEmpty())
                size = e.size();
            
            Object [][] equipsArr = new Object [size][4];
            for(int i =0;i<size;i++){
                equipsArr[i][0] = e.get(i).getId();
                equipsArr[i][1] = e.get(i).getType_id();
                equipsArr[i][2] = e.get(i).getSpecification_id();

            }
            typeSpecTable.setModel(new javax.swing.table.DefaultTableModel(equipsArr,
                new String [] {
                    "Id", "Type ID", "Specification ID"
                }
            ));    
        }

    private void setNewTable(List<EquipSpecificationDto> e){
            int size = 0;
            if(e != null && !e.isEmpty())
                size = e.size();
            
            Object [][] equipsArr = new Object [size][4];
            for(int i =0;i<size;i++){
                equipsArr[i][0] = e.get(i).getId();
                equipsArr[i][1] = e.get(i).getName();
                equipsArr[i][2] = e.get(i).getValue();

            }
            typeSpecTable.setModel(new javax.swing.table.DefaultTableModel(equipsArr,
                new String [] {
                    "Id", "Name", "Value"
                }
            ));    
        }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jScrollPane1 = new javax.swing.JScrollPane();
        typeSpecTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        insertButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        idText = new javax.swing.JTextField();
        typeIdText = new javax.swing.JTextField();
        specIdText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        viewSpecButton = new javax.swing.JButton();

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setTitle("Equipment Type Specification Details");

        typeSpecTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Type ID", "Specification ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        typeSpecTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeSpecTableMouseClicked(evt);
            }
        });
        typeSpecTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                typeSpecTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(typeSpecTable);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        selectButton.setText("Select");

        idText.setText("Enter ID");
        idText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                idTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                idTextFocusLost(evt);
            }
        });

        typeIdText.setText("Enter Type ID");
        typeIdText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                typeIdTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                typeIdTextFocusLost(evt);
            }
        });

        specIdText.setText("Enter Specification ID");
        specIdText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                specIdTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                specIdTextFocusLost(evt);
            }
        });

        jLabel1.setText("ID:");

        jLabel2.setText("Type ID:");

        jLabel3.setText("Specification ID:");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        viewSpecButton.setText("View All Specifications ");
        viewSpecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSpecButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idText)
                            .addComponent(typeIdText)
                            .addComponent(specIdText, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(viewSpecButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(specIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(insertButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectButton)
                    .addComponent(refreshButton)
                    .addComponent(viewSpecButton))
                .addGap(23, 23, 23))
        );

        pack();
    }//GEN-END:initComponents
 
    EquipTypeSpecDetailsDto ets = new EquipTypeSpecDetailsDto() ;
 
    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
    try{
        if(checkValidity()){
           ets.setId(Integer.parseInt(idText.getText()));
           ets.setType_id(Integer.parseInt(typeIdText.getText()));
           ets.setSpecification_id(Integer.parseInt(specIdText.getText()));
           if(business.add(ets)){
               JOptionPane.showMessageDialog(this, "Record Inserted Successfully");
               setTableModel(business.viewAll());
           }
           else{
               JOptionPane.showMessageDialog(this,"This Record Refers to non Existent Type or Specification"); }
           }
        typeSpecTable.repaint();
        idText.setText("Enter ID");
        typeIdText.setText("Enter Type ID");
        specIdText.setText("Enter Specification ID");
    }
    catch(Exception e){
        e.printStackTrace();
    }
        
        
    }//GEN-LAST:event_insertButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

    try{
         int row = typeSpecTable.getSelectedRow();
         ets.setId(Integer.parseInt(typeSpecTable.getModel().getValueAt(row,0).toString()));
         ets.setType_id(Integer.parseInt(typeSpecTable.getModel().getValueAt(row,1).toString()));
         ets.setSpecification_id(Integer.parseInt(typeSpecTable.getModel().getValueAt(row,2).toString()));
         if(business.delete(ets)){
                    JOptionPane.showMessageDialog(this, "Record Deleted Successfully");
                    setTableModel(business.viewAll());            
         }
            typeSpecTable.repaint();
            idText.setText("Enter ID");
            typeIdText.setText("Enter Type ID");
            specIdText.setText("Enter Specification ID");
        }
    catch(java.lang.ArrayIndexOutOfBoundsException e){
        JOptionPane.showMessageDialog(this, "Please select row from table to delete");
        }
    catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void idTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idTextFocusGained
    if (idText.getText().equalsIgnoreCase("Enter ID"))
        idText.setText("");    
    }//GEN-LAST:event_idTextFocusGained

    private void typeIdTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_typeIdTextFocusGained
    if (typeIdText.getText().equalsIgnoreCase("Enter Type ID"))
        typeIdText.setText("");    
    }//GEN-LAST:event_typeIdTextFocusGained

    private void specIdTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_specIdTextFocusGained
    if (specIdText.getText().equalsIgnoreCase("Enter Specification ID"))
        specIdText.setText("");    
    }//GEN-LAST:event_specIdTextFocusGained

    private void idTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idTextFocusLost
    if (idText.getText().trim().equalsIgnoreCase(""))
        idText.setText("Enter ID");  
    }//GEN-LAST:event_idTextFocusLost

    private void typeIdTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_typeIdTextFocusLost
    if (typeIdText.getText().trim().equalsIgnoreCase(""))
        typeIdText.setText("Enter Type ID");  
    }//GEN-LAST:event_typeIdTextFocusLost

    private void specIdTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_specIdTextFocusLost
    if (specIdText.getText().trim().equalsIgnoreCase(""))
        specIdText.setText("Enter Specification ID");  
    }//GEN-LAST:event_specIdTextFocusLost

    private void typeSpecTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeSpecTableMouseClicked
    int row = typeSpecTable.getSelectedRow();
    idText.setText(typeSpecTable.getValueAt(row, 0).toString());
    typeIdText.setText(typeSpecTable.getValueAt(row, 1).toString());
    specIdText.setText(typeSpecTable.getValueAt(row, 2).toString());
    }//GEN-LAST:event_typeSpecTableMouseClicked

    private void typeSpecTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_typeSpecTableKeyPressed
    if( evt.getExtendedKeyCode()==KeyEvent.VK_UP || evt.getExtendedKeyCode()==KeyEvent.VK_DOWN ){
        int row = typeSpecTable.getSelectedRow();
        idText.setText(typeSpecTable.getValueAt(row, 0).toString());
        typeIdText.setText(typeSpecTable.getValueAt(row, 1).toString());
        specIdText.setText(typeSpecTable.getValueAt(row, 2).toString());
    }
    }//GEN-LAST:event_typeSpecTableKeyPressed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        
        try{
            setTableModel(business.viewAll());            
            typeSpecTable.repaint();
            idText.setText("Enter ID");
            typeIdText.setText("Enter Type ID");
            specIdText.setText("Enter Specification ID");
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void viewSpecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSpecButtonActionPerformed
        
        try {
            EquipSpecificationBao b = new BaoFactory().createEquipmentSpecificationBao(); 
            setNewTable(b.listall());
            typeSpecTable.repaint();
        }
        catch(Exception e){
        e.printStackTrace();
        }
        
    }//GEN-LAST:event_viewSpecButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing
                                                                   .UIManager
                                                                   .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing
                         .UIManager
                         .setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util
                .logging
                .Logger
                .getLogger(EqTypeSpecJFrame.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util
                .logging
                .Logger
                .getLogger(EqTypeSpecJFrame.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util
                .logging
                .Logger
                .getLogger(EqTypeSpecJFrame.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util
                .logging
                .Logger
                .getLogger(EqTypeSpecJFrame.class.getName())
                .log(java.util
                         .logging
                         .Level
                         .SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt
            .EventQueue
            .invokeLater(new Runnable() {
                public void run() {
                    new EqTypeSpecJFrame().setVisible(true);
                    //EqTypeSpecJFrame.setDefaultCloseOperation(EqTypeSpecJFrame.DISPOSE_ON_CLOSE);
                }
                
            });
    }
    
    
    private boolean checkValidity(){
            try{
                if(idText.getText().equalsIgnoreCase("Enter ID")){
                    JOptionPane.showMessageDialog(this, "Please, enter id number","",JOptionPane.ERROR_MESSAGE);
                    return false;            
                }
                Integer.parseInt(idText.getText());
            }catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this, "ID is invalid! \n (please enter a number)");
                return false;
            }
            try{
                if(typeIdText.getText().equalsIgnoreCase("Enter Type ID")){
                    JOptionPane.showMessageDialog(this, "Please, enter id number","",JOptionPane.ERROR_MESSAGE);
                    return false;            
                }
                Integer.parseInt(typeIdText.getText());
            }catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this, "ID is invalid! \n (please enter a number)");
                return false;
            }
            try{
                if(specIdText.getText().equalsIgnoreCase("Enter Specification ID")){
                    JOptionPane.showMessageDialog(this, "Please, enter id number","",JOptionPane.ERROR_MESSAGE);
                    return false;            
                }
                Integer.parseInt(specIdText.getText());
                return true;
            }catch (NumberFormatException e){
                JOptionPane.showMessageDialog(this, "ID is invalid! \n (please enter a number)");
                return false;
            }
        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField idText;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextField specIdText;
    private javax.swing.JTextField typeIdText;
    private javax.swing.JTable typeSpecTable;
    private javax.swing.JButton viewSpecButton;
    // End of variables declaration//GEN-END:variables

}
